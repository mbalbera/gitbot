from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

# Load Phi-3 model and tokenizer once to avoid redundant loading
model_name = "EleutherAI/phi-3"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)
text_gen_pipeline = pipeline("text-generation", model=model, tokenizer=tokenizer)

def rephrase_question_for_sql(user_question, metadata):
    """
    Rephrases a user's question to align with SQL query structure.
    
    Args:
        user_question (str): The user's natural language question.
        metadata (dict): Schema metadata, including columns and relationships.
            Example:
            {
                "columns": {"revenue": "total_revenue", "quarter": "fiscal_quarter"},
                "relationships": {"sales": ["time_period"]}
            }
    
    Returns:
        str: The rephrased question formatted for SQL generation.
    """
    # Create SQL-Aware Prompt
    prompt = f"""
    Context: The user is asking a question that will be converted into an SQL query. The database schema contains the following information:
    - Columns: {', '.join([f"{k} (alias: {v})" for k, v in metadata['columns'].items()])}
    - Relationships: {', '.join([f"{k}: {v}" for k, v in metadata['relationships'].items()])}

    Your task is to rewrite the question so that it is precise, unambiguous, and structured in a way that aligns with SQL query components. 
    Focus on specifying:
    - The columns to SELECT
    - Any filters or conditions in the WHERE clause
    - Aggregations (e.g., COUNT, SUM) or GROUP BY terms if implied.

    Examples:
    User Question: "How much revenue did we make in Q4?"
    Rephrased Question: "What is the total_revenue for fiscal_quarter Q4?"

    User Question: "What are sales last year?"
    Rephrased Question: "What is the total_sales for fiscal_year last year?"

    Now process the following question:
    User Question: {user_question}
    Rephrased Question:
    """

    # Generate Rephrased Output
    output = text_gen_pipeline(prompt, max_length=150, num_return_sequences=1, temperature=0.7)
    
    # Extract and clean up the response
    rephrased_question = output[0]["generated_text"].split("Rephrased Question:")[-1].strip()

    return rephrased_question

